<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%=roomName%> Room
    </title>
    <link rel="stylesheet" href="/css/room.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/utility.css">
    <link rel="stylesheet" href="/css/icon.css">
</head>

<body>
    <div class="webpage">
        <header>
            <nav class="navbar opacity-100">
                <div class="container-fluid">
                    <span class="navbar-brand">
                        <img class="glow-svg playlist" src="/img/music-list.svg" alt="Logo"
                            class="d-inline-block align-text-top">
                    </span>
                    <span class="logo-text d-flex align-items-center text-fill glow-text">
                        <%=roomName.toUpperCase()%>
                    </span>
                    <span><img class="glow-svg search" src="/img/search.svg" alt="menu-list"></span>
                </div>
            </nav>
        </header>

        <!-- alert for user joined -->
        <div class="alertclass">

        </div>

        <div class="song-chat d-flex flex-column gap-3 justify-content-center align-items-center m-2 glow-svg">

            <!-- Playlist section for individual room -->
            <div class="playlist-sec position-absolute d-flex flex-column gap-3 p-3 hidden">
                <div class="play-list text-white d-flex">
                    <ul class="user-song list-unstyled m-3 d-flex flex-column gap-1 flex-grow-1">

                    </ul>
                </div>
            </div>

            <!-- Serch Section For Search Song -->
            <div class="searchsec position-absolute d-flex flex-column gap-3 p-3 hidden">
                <div class="search-input d-flex">
                    <input type="text" id="search-input" class="bg-transparent border-0 border-bottom flex-grow-1"
                        placeholder="Search Song" onkeyup="searchSong()">
                    <img class="search-inside" src="img/search.svg" alt="">
                </div>
                <div class="song-list text-white d-flex">
                    <ul id="songlist" class="itemsList list-unstyled m-3 d-flex flex-column gap-1 flex-grow-1">
                        Search songs are Here
                        <!-- List Of songs Fetch From the server -->
                    </ul>

                    <!-- define multer here -->
                    <form id="uploadForm" enctype="multipart/form-data">
                        <input class="form-control" type="file" id="formFile" name="file" required>
                        <button class="btn btn-primary" type="submit">Upload File</button>
                        <div id="statusMessage"></div>
                    </form>

                </div>
            </div>

            <!-- playbar container song info and buttons -->
            <div class="play-container">
                <div class="song-info d-flex flex-column align-items-center justify-content-between">
                    <span class="song-name">Add Songs From The Search</span>
                    <span class="song-channel">
                        <%= roomName %> MEHFEEL
                    </span>
                    <div class="seek-container d-flex flex-column gap-1">
                        <div class="seek-time d-flex justify-content-between">
                            <span class="currunt-time">00:00</span>
                            <span class="duration">00:00</span>
                        </div>
                        <div class="seekbar">
                            <div class="line">
                                <div class="dot"></div>
                            </div>
                        </div>
                    </div>
                    <div class="controls d-flex gap-5">
                        <span class="prev">
                            <img class="size" src="/img/previous.svg" alt="previous">
                        </span>
                        <span class="play">
                            <img class="song-play size" src="/img/play.svg" alt="play">
                        </span>
                        <span class="next">
                            <img class="size" src="/img/next.svg" alt="next">
                        </span>
                    </div>
                </div>
            </div>

            <div class="chat-sec">
                <div class="chat-info d-flex flex-column">
                    <div class="showlogo d-flex justify-content-center align-items-center">
                        <img class="invert" src="/img/logo-music.svg" alt="">
                    </div>
                    <div class="chat-container flex-grow-1 overflow-y-auto">
                    </div>
                    <div class="msg-input">
                        <div class="input-container d-flex justify-content-between align-items-center">
                            <input type="text" placeholder="Type Your Message Here..." class="flex-grow-1">
                            <img class="sendbtn" onclick="javascript:SendMessage()" src="/img/send.svg" alt="">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
    <!-- <script src="/js/client-side.js"></script> -->
    <script>
        const audiolib = new Audio()
        const usrname = prompt("Enter Your Name") || ('User' + Math.floor(Math.random() * 900));

        //connection for socket connection and send username to the server
        const socket = io({ query: { name: `${usrname}` } });

        socket.emit('joinRoom', '<%= roomName %>'); // Join the room

        //alert for new joins
        socket.on('alert', (msg) => {
            // let alertclass = document.querySelector(".alertclass")
            alertclass.innerHTML = `<div class="alert alert-warning alert-dismissible fade show" role="alert">${msg}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>`
        setTimeout(() => {
            alertclass.innerHTML = ''
        }, 3000);
        });

        // user name alert display for joining room
        if (usrname) {
            document.querySelector(".alertclass").setAttribute('style', "visibility: visible;")
        }


        // Message sendind logic and design
        let ChatContainer = document.querySelector(".chat-container")
        let InputContainer = document.querySelector('.input-container>input')
        let SendBtn = document.querySelector(".sendbtn")
        let alertclass = document.querySelector(".alertclass")

        InputContainer.addEventListener("keypress", function (event) {
            // If the user presses the "Enter" key on the keyboard
            if (event.key === "Enter") {
                // Cancel the default action, if needed
                event.preventDefault();
                // Trigger the button element with a click
                SendBtn.click();
            }
        });

        // send message function for logic and ux
        function SendMessage() {
            let ChatMasssage = document.createElement('div');
            ChatMasssage.setAttribute('class', 'block float-end');
            ChatContainer.appendChild(ChatMasssage);
            ChatMasssage.textContent = InputContainer.value
            socket.emit('chatMessage', `${InputContainer.value}`, '<%= roomName %>');
            InputContainer.value = ""

            // Keep the focus on the input after sending the message
            InputContainer.focus();

            //make scroll at the end on every click
            ChatContainer.scrollTop = ChatContainer.scrollHeight;
        }

        // incoming message from server
        socket.on('messages', (msg) => {
            IncomingMsg = document.createElement('div')
            ChatContainer.appendChild(IncomingMsg);
            IncomingMsg.setAttribute('class', 'block float-start')
            IncomingMsg.textContent = msg

            //make scroll at the end on every click
            ChatContainer.scrollTop = ChatContainer.scrollHeight;
        })



        //STREM SONG
        //function for play song
        const playMusic = (track) => {
            const songName = track;

            fetch('/playSong', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ songName: songName }), // Send song name in the request body
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch the song');
                    } else {
                        return response.blob(); // Get the song as a Blob
                    }
                })
                .then(blob => {
                    const audioURL = URL.createObjectURL(blob);
                    audiolib.src = audioURL;  // Set the audio source to the Blob URL
                    audiolib.play();          // Play the song
                    SongPlay.src = '/img/pause.svg'
                })
                .catch(error => {
                    console.error('Error fetching the song:', error);
                    alert('Failed to play the song');
                });
        }

        //UPLOAD SONG: fetch uplload song detail
        document.getElementById('uploadForm').addEventListener('submit', function (e) {
            e.preventDefault(); // Prevent form from refreshing the page

            const fileInput = document.getElementById('formFile');
            const file = fileInput.files[0]; // Get the selected file

            if (!file) {
                document.getElementById('statusMessage').innerText = 'Please select a file.';
                return;
            }

            const formData = new FormData();
            formData.append('file', file); // Append the file to FormData

            // Send the file to the server
            fetch('/api/upload', {
                method: 'POST',
                body: formData,
            })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('statusMessage').innerText = data.songs || 'File uploaded successfully!';
                    playlistarr.push(data.songs)
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('statusMessage').innerText = 'File upload failed.';
                });
        });



        //NEW LOGIC: SEARCH QUERY SEND TO SERVER
        function searchSong() {
            const query = document.getElementById('search-input').value;
            if (query.length < 2 || query.length == 0) { // Don't send a request for very short queries
                document.getElementById('songlist').textContent = 'Loading...'
                return;
            }

            // Send the query to the backend to search for matching songs
            fetch(`/api/searchSongs?query=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    displayResults(data);
                })
                .catch(error => {
                    console.error('Error fetching search results:', error);
                    document.getElementById('songlist').innerHTML = 'Error loading songs.';
                });
        }


        //DISPLAY DATA
        let playlistarr = [] //PlayList of songs
        let curruntSong = ''

        function displayResults(data) {
            const ul = document.getElementById('songlist');
            let toggle = false;
            ul.innerHTML = ''; // Clear previous results

            if (data && data.songs && data.songs.length > 0) {
                data.songs.forEach(song => {
                    const li = document.createElement('li');
                    li.setAttribute('id', 'song')
                    li.innerHTML = `<div class="song-card d-flex w-50 gap-lg-4 align-items-center"><img class="song-card-image" src="/img/music_disc.png" alt=""><div class="flex-grow-1 overflow-scroll"><span class="song-name">${song.name}</span></div><img class="playmusic invert" src="/img/play.svg" alt=""></div>`
                    ul.appendChild(li);
                    toggle = true
                });
            } else {
                ul.innerHTML = 'No songs found';
                toggle = false
            }

            //if song-card click add to the playlist
            if (toggle) {

                //add song to the playlist array
                document.querySelectorAll('#songlist>li').forEach(songs => {
                    songs.addEventListener('click', (e) => {
                        e.preventDefault()
                        socket.emit('addmusic', songs.textContent, '<%= roomName %>')
                        SongPlayListUpdate(songs.textContent)
                    })
                })

                //listen for songs add playlist
                socket.on('addmusic', (songs) => {
                    SongPlayListUpdate(songs)
                })

                //function for add songs in userplaylist
                function SongPlayListUpdate(songs) {
                    if (!playlistarr.includes(songs)) {
                        playlistarr.push(songs)
                    }

                    //add songs to the playlist section
                    const UserSong = document.querySelector('.user-song')
                    if (!(playlistarr.length <= 0)) {
                        UserSong.innerHTML = ' '
                        playlistarr.forEach(songs => {
                            if (!(UserSong.innerText).includes(songs)) {
                                const li = document.createElement('li')
                                li.setAttribute('id', 'song')
                                const SongCardHtml = `<div class="song-card d-flex w-50 gap-lg-4 align-items-center"><img class="song-card-image" src="/img/music_disc.png" alt=""><div class="flex-grow-1 overflow-scroll"><span class="song-name">${songs}</span></div><img class="playmusic invert" src="/img/play.svg" alt=""></div>`
                                li.innerHTML = SongCardHtml
                                UserSong.appendChild(li)
                            }
                        })
                        //add event loster to play song from the playlist
                        const UserSongLi = document.querySelectorAll('.user-song>li')
                        UserSongLi.forEach(songs => {
                            songs.addEventListener('click', () => {
                                // PlaySongCard(songs.textContent)
                                socket.emit('play', songs.textContent, '<%=roomName%>')
                            })
                        })

                    }
                }

                //load song
                const songCard = document.querySelectorAll('#song')
                if (songCard) {
                    songCard.forEach(songs => {
                        songs.addEventListener('click', (e) => {
                            e.preventDefault()
                            // PlaySongCard(songs)
                            socket.emit('play', songs.textContent, '<%=roomName%>')
                        })
                    })
                }
            }
        }

        //listen on for play
        socket.on('playmusic', (song) => {
            PlaySongCard(song)
        })


        //function for update time duration on playbar
        const line = document.querySelector('.seekbar>.line')
        const dot = document.querySelector('.line>.dot')
        const SeekTime = document.querySelector('.currunt-time')
        function CurruntMusicTime() {
            setInterval(() => {
                SeekTime.textContent = secondsToMinutesSeconds(audiolib.currentTime)
                dot.style.left = `${(audiolib.currentTime / audiolib.duration) * 100}%`
            }, 100);
        }

        // Variables to track dragging
        let isDragging = false;

        // Add event listeners for mouse and touch events
        dot.addEventListener('mousedown', startDragging);
        dot.addEventListener('touchstart', startDragging);

        document.addEventListener('mouseup', stopDragging);
        document.addEventListener('touchend', stopDragging);

        document.addEventListener('mousemove', onMove);
        document.addEventListener('touchmove', onMove);

        // Function to handle the start of dragging
        function startDragging(e) {
            isDragging = true;
            e.preventDefault(); // Prevent text selection or unwanted scrolling
        }

        // Function to handle the stop of dragging
        function stopDragging() {
            if (isDragging) {
                isDragging = false;
            }
        }

        // Function to handle the movement of the dot
        function onMove(e) {
            if (!isDragging) return;

            // Get the correct event (mouse or touch)
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;

            const containerRect = line.getBoundingClientRect();
            let newX = clientX - containerRect.left;

            // Ensure the dot stays within bounds
            newX = Math.max(0, Math.min(newX, containerRect.width));

            // dot.style.left = `${newX}px`;

            
            // Update the audio current time based on the dot position
            const progress = newX / containerRect.width;
            audiolib.currentTime = progress * audiolib.duration;
            
            //send data to room
            socket.emit('seekposition', `${newX}`, progress, `<%=roomName%>`)
        }

        //incoming signal of seek postion from theserver
        socket.on('seekposition', (msg, progress)=>{
            dot.style.left = `${msg}px`
            // Update the audio current time based on the dot position
            audiolib.currentTime = progress * audiolib.duration;
        })


        //function for play song from songcard
        function PlaySongCard(songs) {
            CurruntMusicTime()
            playMusic(songs)
            UpdatePlaybar(songs)
            document.querySelectorAll('.playmusic').forEach(li => {
                if (!(songs === li.parentElement.textContent)) {
                    li.src = '/img/play.svg'
                } else {
                    li.src = '/img/pause.svg'
                }
            })
            document.querySelectorAll('.user-song>li').forEach(li => {
                if ((songs === li.textContent)) {
                    li.querySelector('.playmusic').src = '/img/pause.svg'
                }
            })
        }

        //function for update song name and duration in playbar
        function UpdatePlaybar(songname) {
            const SongName = document.querySelector('.song-info>.song-name')
            const Duration = document.querySelector('.seek-time>.duration')
            SongName.textContent = songname
            Duration.textContent = secondsToMinutesSeconds(audiolib.duration)
        }


        //function 
        function secondsToMinutesSeconds(seconds) {
            if (isNaN(seconds) || seconds < 0) {
                return "00:00";
            }
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            const formattedMinutes = String(minutes).padStart(2, '0');
            const formattedSeconds = String(remainingSeconds).padStart(2, '0')
            return `${formattedMinutes}:${formattedSeconds}`;
        }


        //evnet listeners for ui

        //play pause controller for song
        const SongPlay = document.querySelector('.song-play')
        SongPlay.addEventListener('click', () => {
            socket.emit('pause', '<%=roomName%>')
        })

        //listen play pause for song
        socket.on("pausemusic", () => {
            PlayPause()
        })

        function PlayPause() {
            if (audiolib.paused) {
                audiolib.play()
                SongPlay.src = '/img/pause.svg'
            }
            else {
                audiolib.pause()
                SongPlay.src = '/img/play.svg'
            }
        }

        //next button eventlistener
        const NextBtn = document.querySelector('.next')
        const PrevBtn = document.querySelector('.prev')
        let currentIndex = 0; //Tracks the current song index

        function CurrentSong() {
            playMusic(playlistarr[currentIndex])
            UpdatePlaybar(playlistarr[currentIndex])
        }

        NextBtn.addEventListener('click', () => {
            currentIndex = (currentIndex + 1) % playlistarr.length; // Circular navigation
            CurrentSong();
        })

        PrevBtn.addEventListener('click', () => {
            currentIndex = (currentIndex - 1 + playlistarr.length) % playlistarr.length; // Circular navigation
            CurrentSong();

        })

        //search eventlistener
        const SearchSvg = document.querySelector(".search")
        const SearchSec = document.querySelector(".searchsec")
        SearchSvg.addEventListener("click", () => {
            SearchSec.classList.toggle('hidden');
            PlayList.classList.add('hidden')
            document.getElementById('search-input').value = ''
            document.getElementById('songlist').textContent = 'Search Songs Are here'
        })

        //playlist eventlistener
        const MusicSvg = document.querySelector(".playlist")
        const PlayList = document.querySelector(".playlist-sec")
        MusicSvg.addEventListener("click", () => {
            PlayList.classList.toggle('hidden');
            SearchSec.classList.add('hidden')
        })


    </script>
</body>

</html>