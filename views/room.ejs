<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%=roomName%> room
    </title>
    <link rel="stylesheet" href="/css/room.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/utility.css">
    <link rel="stylesheet" href="/css/icon.css">
</head>

<body>
    <div class="webpage">
        <header>
            <nav class="navbar opacity-100">
                <div class="container-fluid">
                    <a class="navbar-brand" href="#">
                        <img class="glow-svg" src="/img/music-list.svg" alt="Logo"
                            class="d-inline-block align-text-top">
                    </a>
                    <span class="logo-text d-flex align-items-center text-fill glow-text">
                        <%=roomName%>
                    </span>
                    <span><img class="glow-svg search" src="/img/search.svg" alt="menu-list"></span>
                </div>
            </nav>
        </header>

        <!-- alert for user joined -->
        <div class="alertclass">

        </div>

        <div class="song-chat d-flex flex-column gap-3 justify-content-center align-items-center m-2 glow-svg">

            <!-- Serch Section For Search Song -->
            <div class="searchsec position-absolute d-flex flex-column gap-3 p-3">
                <div class="search-input d-flex">
                    <input type="text" id="search-input" class="bg-transparent border-0 border-bottom flex-grow-1"
                        onkeyup="searchItems()">
                    <img src="img/search.svg" alt="">
                </div>
                <div class="song-list text-white">
                    <ul class="itemsList list-unstyled m-3 d-flex flex-column gap-1">
                        <!-- List Of songs Fetch From the server -->
                    </ul>
                </div>
            </div>

            <!-- playbar container song info and buttons -->
            <div class="play-container">
                <div class="song-info d-flex flex-column align-items-center justify-content-between">
                    <span class="song-name">Lorem ipsum dolor sit amet consectetur jnkjshj askjhkjads.</span>
                    <span class="song-channel">Helloguys</span>
                    <div class="seek-container d-flex flex-column gap-1">
                        <div class="seek-time d-flex justify-content-between">
                            <span class="currunt-time">00:00</span>
                            <span class="duration">04:00</span>
                        </div>
                        <div class="seekbar">
                            <div class="line">
                                <div class="dot"></div>
                            </div>
                        </div>
                    </div>
                    <div class="controls d-flex gap-5">
                        <span class="prev">
                            <img class="size" src="/img/previous.svg" alt="previous">
                        </span>
                        <span class="play">
                            <img class="size" src="/img/play.svg" alt="play">
                        </span>
                        <span class="next">
                            <img class="size" src="/img/next.svg" alt="next">
                        </span>
                    </div>
                </div>
            </div>

            <div class="chat-sec">
                <div class="chat-info d-flex flex-column">
                    <div class="showlogo d-flex justify-content-center align-items-center">
                        <img class="invert" src="/img/logo-music.svg" alt="">
                    </div>
                    <div class="chat-container flex-grow-1 overflow-y-auto">
                        <div class="block float-start">hello</div>
                        <div class="block float-end">jhj</div>
                        <div class="block float-start">hiii</div>
                        <div class="block float-start">heheh</div>
                    </div>
                    <div class="msg-input">
                        <div class="input-container d-flex justify-content-between align-items-center">
                            <input type="text" placeholder="Type Your Message Here..." class="flex-grow-1">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
    <!-- <script src="/js/client-side.js"></script> -->
    <script>
        const usrname = 'yash' //prompt("Enter Your Name")

        //connection for socket connection and send username to the server
        const socket = io({ query: { name: `${usrname}` } });

        socket.emit('joinRoom', '<%= roomName %>'); // Join the room

        //alert for new joins
        socket.on('message', (msg) => {
            // let alertclass = document.querySelector(".alertclass")
            alertclass.innerHTML = `<div class="alert alert-warning alert-dismissible fade show" role="alert">${msg}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>`
        });

        // user name alert display for joining room
        if (usrname) {
            document.querySelector(".alertclass").setAttribute('style', "visibility: visible;")
        }


        // Message sendind logic and design
        let ChatContainer = document.querySelector(".chat-container")
        let InputContainer = document.querySelector('.input-container>input')
        let SendBtn = document.querySelector(".sendbtn")
        let alertclass = document.querySelector(".alertclass")

        InputContainer.addEventListener("keypress", function (event) {
            // If the user presses the "Enter" key on the keyboard
            if (event.key === "Enter") {
                // Cancel the default action, if needed
                event.preventDefault();
                // Trigger the button element with a click
                SendBtn.click();
            }
        });

        // send message function for logic and ux
        function SendMessage() {
            let ChatMasssage = document.createElement('div');
            ChatMasssage.setAttribute('class', 'block float-end');
            ChatContainer.appendChild(ChatMasssage);
            ChatMasssage.textContent = InputContainer.value
            socket.emit('chatMessage', `${InputContainer.value}`, '<%= roomName %>');
            InputContainer.value = ""

            // Keep the focus on the input after sending the message
            InputContainer.focus();

            //make scroll at the end on every click
            ChatContainer.scrollTop = ChatContainer.scrollHeight;
        }

        // incoming message from server
        socket.on('messages', (msg) => {
            IncomingMsg = document.createElement('div')
            ChatContainer.appendChild(IncomingMsg);
            IncomingMsg.setAttribute('class', 'block float-start')
            IncomingMsg.textContent = msg

            //make scroll at the end on every click
            ChatContainer.scrollTop = ChatContainer.scrollHeight;
        })

        // Function to fetch songs from the server
        async function fetchSongs() {
            try {
                const response = await fetch('/api/songs');
                const songs = await response.json();
                return songs;
            } catch (error) {
                console.error('Error fetching songs:', error);
                return [];
            }
        }

        // Add songs to the search list
        const songList = document.querySelector(".song-list>ul");

        async function loadSongs() {
            const songs = await fetchSongs();
            songs.forEach(song => {
                songList.innerHTML += `
            <li>
                <div class="song-card d-flex w-50 gap-lg-4 align-items-center">
                    <img class="song-card-image" src="/img/music_disc.png" alt="">
                    <div class="flex-grow-1">
                        <span class="song-name">${song}</span>
                    </div>
                    <img class="heart" src="/img/heart.svg" alt="">
                </div>
            </li>`;
            });
        }

        // Filter out songs from the list by input
        function searchItems() {
            let input = document.getElementById('search-input');
            let filter = input.value.toLowerCase();
            let itemsList = document.querySelector('.itemsList');
            let items = itemsList.getElementsByTagName('li');

            // Loop through all list items and hide those who don't match the search query
            for (let i = 0; i < items.length; i++) {
                let item = items[i];
                let songName = item.querySelector('.song-name').textContent || item.querySelector('.song-name').innerText;

                if (songName.toLowerCase().indexOf(filter) > -1) {
                    item.style.display = ''; // Show item
                } else {
                    item.style.display = 'none'; // Hide item
                }
            }
        }

        // Load the songs when the page loads
        window.onload = loadSongs;





        console.log('Script is running...');

    </script>
</body>

</html>